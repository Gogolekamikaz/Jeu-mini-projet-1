package ch.epfl.cs107.play.game.superpacman.area;

import ch.epfl.cs107.play.game.areagame.actor.Orientation;
import ch.epfl.cs107.play.math.DiscreteCoordinates;
import ch.epfl.cs107.play.window.Window;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class SuperPacmanAutoGeneratedMazeBehavior extends SuperPacmanBehavior {

    /// Random generator for the maze
    protected final Random rand;

    private DiscreteCoordinates spawnPoint;

    private DiscreteCoordinates[] possibleSpwanPoint = {new DiscreteCoordinates(1, getHeight()-2),
                                                        new DiscreteCoordinates(getWidth()-2, getHeight()-2),
                                                        new DiscreteCoordinates(getWidth()-2, 1)};


    /**
     * Default AutoGeneratedMazeBehavior Constructor
     *
     * @param window (Window): graphic context, not null
     * @param width
     * @param height
     */
    public SuperPacmanAutoGeneratedMazeBehavior(Window window, int width, int height){
        super(window, width, height);

        for(int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                setCell(x, y, new SuperPacmanCell(x, y, SuperPacmanBehavior.SuperPacmanCellType.NONE));
            }
        }

        rand = new Random();

        generateMazeFeatures(width, height);
        createMaze(width, height);

    }

    private void generateMazeFeatures(int width, int height){

        //Initialize the outer walls
        for (int x = 0; x < width; x++) {
            ((SuperPacmanCell)getCell(x, height-1)).setType(SuperPacmanBehavior.SuperPacmanCellType.WALL);
            ((SuperPacmanCell)getCell(x, 0)).setType(SuperPacmanBehavior.SuperPacmanCellType.WALL);
        }
        for (int y=1; y<height-1; y++){
            ((SuperPacmanCell)getCell(0, y)).setType(SuperPacmanBehavior.SuperPacmanCellType.WALL);
            ((SuperPacmanCell)getCell(width-1, y)).setType(SuperPacmanBehavior.SuperPacmanCellType.WALL);
        }
        ((SuperPacmanCell)getCell(3, 1)).setType(SuperPacmanBehavior.SuperPacmanCellType.WALL);
        ((SuperPacmanCell)getCell(6, 1)).setType(SuperPacmanBehavior.SuperPacmanCellType.WALL);

        //Initialize the ghosts
        int ghostNumber = (int)Math.ceil(width/20.)%2 == 1? (int)Math.ceil(width/20.) : (int)Math.ceil(width/20.)+1;
        DiscreteCoordinates middleCoordinates = new DiscreteCoordinates((int)Math.ceil(width/2.), (int)Math.ceil(height/2.));

        for (int i = (int)-Math.floor(ghostNumber/2.); i <= (int)Math.floor(ghostNumber/2.); i++) {
            System.out.println(i);
            ((SuperPacmanCell)getCell(middleCoordinates.x+i, middleCoordinates.y+1)).setType(SuperPacmanBehavior.SuperPacmanCellType.FREE_WITH_BLINKY);
            if(i%2 == 0){
                ((SuperPacmanCell)getCell(middleCoordinates.x+i, middleCoordinates.y-1)).setType(SuperPacmanBehavior.SuperPacmanCellType.FREE_WITH_INKY);
            } else {
                ((SuperPacmanCell)getCell(middleCoordinates.x+i, middleCoordinates.y-1)).setType(SuperPacmanBehavior.SuperPacmanCellType.FREE_WITH_PINKY);
            }
        }

        //Initialize the Door
        for(int i = 4; i<6; i++){
            ((SuperPacmanCell)getCell(i, 0)).setType(SuperPacmanBehavior.SuperPacmanCellType.FREE_EMPTY);
            ((SuperPacmanCell)getCell(i, 1)).setType(SuperPacmanBehavior.SuperPacmanCellType.FREE_EMPTY);
        }

        //Initialize Spawn Point
        int spawn = rand.nextInt(3);
        System.out.println(spawn);
        spawnPoint = possibleSpwanPoint[spawn];
        ((SuperPacmanCell)getCell(spawnPoint.x, spawnPoint.y)).setType(SuperPacmanBehavior.SuperPacmanCellType.FREE_EMPTY);
    }

    private void createMaze(int width, int height){

        List<DiscreteCoordinates> lastMoves = new ArrayList<>();
        DiscreteCoordinates currentCell = getSpawnPoint();
        lastMoves.add(currentCell);

        do {
            List<Orientation> orientations = new ArrayList<>(Arrays.asList((Orientation.values())));
            boolean newCellFound = false;

            do{
                Orientation nextOrientation = randomCell(orientations);
                DiscreteCoordinates nextCell = currentCell.jump(nextOrientation.toVector());

                if(((SuperPacmanCell)getCell(nextCell.x, nextCell.y)).getType() == SuperPacmanCellType.NONE && neighboursCheck(nextCell, nextOrientation)){
                    lastMoves.add(nextCell);
                    ((SuperPacmanCell)getCell(nextCell.x, nextCell.y)).setType(SuperPacmanCellType.FREE_WITH_DIAMOND);
                    newCellFound = true;
                } else {
                    orientations.remove(nextOrientation);
                }

            } while(!orientations.isEmpty() && !newCellFound);

            if(orientations.isEmpty()){
                lastMoves.remove(currentCell);
                //((SuperPacmanCell)getCell(currentCell.x, currentCell.y)).setType(randomItem());
            }

            currentCell = lastMoves.get(lastMoves.size()-1);

        } while (!currentCell.equals(getSpawnPoint()));

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                if(((SuperPacmanCell)getCell(x, y)).getType() == SuperPacmanCellType.NONE){
                    ((SuperPacmanCell)getCell(x, y)).setType(SuperPacmanBehavior.SuperPacmanCellType.WALL);
                }
            }
        }
    }

    private Orientation randomCell(List<Orientation> orientations){
        int orientationIndex = rand.nextInt(orientations.size());
        return orientations.get(orientationIndex);
    }

    private boolean neighboursCheck(DiscreteCoordinates coordinates, Orientation orientation){

        if(orientation == Orientation.DOWN || orientation == Orientation.UP){
            for (int x = coordinates.x-1; x < coordinates.x+2; x++) {
                if(((SuperPacmanCell)getCell(x, coordinates.y)).getType() == SuperPacmanCellType.FREE_WITH_DIAMOND || ((SuperPacmanCell)getCell(x, coordinates.jump(orientation.toVector()).y)).getType() == SuperPacmanCellType.FREE_WITH_DIAMOND){
                    return false;
                }
            }
        } else if(orientation == Orientation.LEFT || orientation == Orientation.RIGHT){
            for (int y = coordinates.y-1; y < coordinates.y+2; y++) {
                if(((SuperPacmanCell)getCell(coordinates.x, y)).getType() == SuperPacmanCellType.FREE_WITH_DIAMOND || ((SuperPacmanCell)getCell(coordinates.jump(orientation.toVector()).x, y)).getType() == SuperPacmanCellType.FREE_WITH_DIAMOND){
                    return false;
                }
            }
        }

        return true;
    }

    private SuperPacmanCellType randomItem(){

         int randomIndex = rand.nextInt(10);

         if(randomIndex<3){
             return SuperPacmanCellType.FREE_WITH_BONUS;
         } else if (randomIndex<6){
             return SuperPacmanCellType.FREE_WITH_CHERRY;
         } else {
             return SuperPacmanCellType.FREE_WITH_DIAMOND;
         }
    }

    public DiscreteCoordinates getSpawnPoint() {
        return spawnPoint;
    }

}
